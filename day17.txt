인증과 인가

Authentication은  쉽게 말해 로그인
내가 이 사이트에 가입된 회원임을, 즉 특정 서비스를 이용하는 데 일정 권한이 주어진 사용자임을 
ID와 패스워드를 통해 인증받는 것

Authorization
한번 인증을 받은 사용자가 이후 서비스의 여러 기능을 사용할 때, 즉 
내 계정으로만 할 수 있는 활동으 시도할 때, 인증받은 사용자임을 알아보고 허가를 해 주는 것
로그인이 유지되는 상태에서 일어나는 일
	예) 페이스북으로 로그인 한 후(인증) 글을 쓰고 좋아요를 누른다(인가) 

로그인 과정
1. 데이터베이스에 저장된 사용자 계정의 해시값 등을 꺼내온 다음
2. 이것들이 사용자의 암호를 복잡한 알고리즘으로 계산한 값과 일치하는 지

세션방식 (SessionID를 사용해서 어떤 사용자가 서버에 로그인되어있음이 지속되는 상태)
사용자가 로그인에 성공하면 서버는 세션을 발급(영화관 티켓같은 거)
이걸 쭈욱 찢어서 반쪽은 사용자의 브라우저로, 다른 반쪽은 메모리(책상)로 보냄 (경우에 따라서는 하드디스크(서랍)에 넣거나, 데이터베이스(창고)에 넣어놓기도)

브라우저는 SessionID라는 이름의 쿠키로 저장하고, 다음 사이트의 요청이 있을 때마다 세션을 실어보냄

세션의 허점
사용자가 동시에 많이 접속하면 메모리 부족(그리고 메모리는 휘발성)
즉, 서버가 재부팅되는 상황이 오면(에러) 메모리에 있던 것들은 다 날라감(사용자 다 튕김)
하드에 넣어놓을 경우, 메모리보다는 느린 방식

해결방식
사용자의 요청이 각자 할당된 서버로만 보내지게 하는 것(어려움)
서버에 할당된 세션을 공용 데이터베이스에 넣어놓음(엄청 느려짐)
레디스/MemCached같은 메모리형 데이터베이스 서버(길~~다란 공용책상  //  물론 책상이 엎어질 수 있음)

이런 부담없이 인가를 구현하기 위해 만들어진 게 jwt토큰 인증방식
이건 찢어서 서버랑 클라이언트랑 나눠 갖는 게 아니라 클라이언트에게만 줌
jwt토큰의 생김새 : aSDq23.jxcbFb4.2386zxh (그냥 숫자, 문자가 아무렇게나 섞임 // 근데 .을 기준으로 3파트로 나뉨)
각각 header(헤더), payload(페이로드), verify signature(서명)

페이로드를 Base64로 디코딩해보면 json방식의 여러 정보(claim//클레임이라고 함) 들이 들어있음(누가 누구에게 발급했는지, 언제까지 유효한지, 서비스가 사용자에게 토큰을 통해 공개하기 원하는 내용(닉네임,레벨...))
이 토큰 자체에 정보들이 들어있다는 의미 = 서버가 요청마다 일일이 데이터베이스 뒤져서 찾아야 할 것들이 줄어듦

그럼 보안문제는?
그래서 헤더와 서명이 있음
헤더는 두가지 정보를 가지고 있음
type 토큰의 타입 (JWT로 고정값임) // alg(알고리즘 약자) 3번 서명값을 만드는 데 사용될 알고리즘 지정(어려 암호화 방식 중 하나 지정)
헤더와 페이로드, 서버에 감춰놓은 비밀 값, 이 셋을 암호화 알고리즘에 넣고 돌리면 3번 서명값 도출, 즉 조작하려면 서버에 숨겨진 값을 알아야 함

서버는 사용자의 요청에 토큰값이 실려들어오면 헤더와 페이로드의 값을 서버의 비밀키와 돌려서 계산된 결과 값이 서명값과 일치하는 지 확인
만약 페이로드의 값이 누군가에 의해 훼손되었다면, 서명 값이 달라짐
즉, 서버는 비밀 값만 가지고 있으면 되는 것임

시간에 따른 상태값을 갖지 않는 것을 stateless하다고 함 // 세션은 반대인 stateful

그러나 JWT는 중복 로그인 관리가 어려움 // 토큰을 탈취당할 시 그에 대한 제제도 어려움

보안점
토큰 두개 줌(수명이 엄청 짧은 거(몇시간,몇분)/ 좀 긴거(보통 2주))
access토큰이 수명 짧고
refresh 토큰이 수명 김

1. 클라이언트에게 access토큰과 refresh 토큰을 보내고 시간이 지나면, 클라이언트는 refresh 토큰만 서버에 보내줄 것임 access토큰은 죽었으니까
2. refresh 토큰은 상응값을 데이터베이스에도 저장
3. 서버는 refresh 토큰을 데이터베이스에 저장된 상응값과 대교해서 맞다면, 새 access토큰을 발급해줌
물론 access토큰이 살아있을 때 해킹을 끝내면 무쓸모



