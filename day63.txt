https://docs.google.com/document/d/1KyDFgXa2Dp9Ys6RMOMXe8MZgKXmCbclf/edit?usp=sharing&ouid=109616176654652124432&rtpof=true&sd=true
API응답이 며

1.클라이언트의 요청을 DistpatcjerServler에 전달
2.요청한 url에 맞는 controller 검색하여 HandlerMapping에 전달
3.HandlerMapping에서 해당 controller에 처리 요청
4.controller에서 처리 결과를 HandlerAdapter에서 ModelAndView 객체로 변환하여 DispatcherServlet에 전달
5.DispatcherServlet에서 전달받은 ModelAndView 객체를 이용하여 매핑되는 View를 검색
6.viewResolver에서 처리 결과를 view에 전달
7.처리결과가 포함된 view를 DispatcherServlet에 전달
8.DispatcherServlet에서 최종 응답 결과를 클라이언트에게 출력

필터와 인터셉트
https://mangkyu.tistory.com/173

maver과 gradle
https://velog.io/@alicesykim95/Maven%EA%B3%BC-Gradle%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90
https://dev-coco.tistory.com/65#--%--%EB%A-%--%EC%-D%B-%EB%B-%---Maven-%--VS%--%EA%B-%B-%EB%-E%--%EB%--%A--Gradle-
간결함: xml의 구조적인 장점이 있지만 문서의 양 자체가 비대하지는 단점이 있는데, Gradle은 코딩에 의한 간결한 정의가 가능하다.
재사용에 용이: 프로젝트 설정 주입 방식(Configuration Injection)으로 정의하여 Maven의 상속 구조보다 재사용에 용이하다.
구조적인 장점: Build Script를 xml이 아닌 Groovy기반의 DSL(Domain Specific Language)를 사용하여 코드로서 설정정보를 구성하기 때문에 구조적인 장점이 있다.
편리함: Gradle 설치 없이 Gradle Wrapper를 이용하여 빌드를 지원한다.
멀티 프로젝트: 애초에 멀티 프로젝트 빌드를 지원하기 위해 설계된 빌드 관리 도구이다.
지원: Maven과 Ivy repository를 완전 지원한다.

아파치, 톰캣
https://thisisprogrammingworld.tistory.com/195
https://livenow14.tistory.com/67
https://velog.io/@kdhyo/Apache-Tomcat-%EB%91%98%EC%9D%B4-%EB%AC%B4%EC%8A%A8-%EC%B0%A8%EC%9D%B4%EC%A7%80

스프링 시큐리티 동작 과정
https://doozi0316.tistory.com/entry/Spring-Security-Spring-Security%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EB%8F%99%EC%9E%91-%EA%B3%BC%EC%A0%95
1. HTTP 요청 수신(Http Request) 및 AuthenticationFilter 통과
2. 사용자 자격 증명을 기반으로 AuthenticationToken 생성
3. AuthenticationManager를 위해 생성된 AuthenticationToken 위임
4. AuthenticationProvider 목록으로 인증 시도
5. UserDetailsService / 6. UserDetails / 7. User
8. AuthenticationException(실패 시)
9. 인증 완료!

pojo
POJO(Plain Old Java Object) 오래된 방식의 간단한 자바 오브젝트라는 의미이다. 스프링 프레임워크 이전에는 원하는 엔터프라이즈 기술이 있다면 그 기술을 직접적으로 사용하는 객체를 설계했으나, 
현재는 많은 기술과 환경에 의존하면서 개발하는 방식이 널리 퍼져있다. 이 말은 객체지향을 지향하는 자바가 객체지향 설계의 장점들을 잃어버리고 있다는 의미이다.

Spring Framework에서의 POJO로는 하이버네이트를 예로 들 수 있다. 물론 하이버네이트 역시 특정 기술의 의존이라고 할 수 있지만, 하이버네이트는 Jpa를 구현하기 위한 필수 요소는 아니기 때문이다.
하이버네이트 말고도 다양한 ORM 프레임워크가 Jpa를 구현하는 데 사용될 수 있다. 결국 이러한 매커니즘으로 인해 새로운 엔터프라이즈를 도입하면서도 기술의 의존성을 완화시킬 수 있으며, POJO를 유지할 수 있다고 생각한다.

autoWiring
의존 객체의 타입에 해당하는 bean을 찾아 주입하는 역할을 한다.
@Autowired는 의존성 주입을 할 때 사용하는 Annotation으로 의존 객체의 타입에 해당하는 bean을 찾아 주입하는 역할을 한다.

@Autowired는 기본적으로 아래의 위치에서 사용할 수 있다.
생성자 (스프링 4.3부터는 생략 가능)
Setter
필드

https://devlog-wjdrbs96.tistory.com/166

인터페이스와 추상 클래스의 차이
추상클래스는 추상 메서드를 선언하여 상속을 통해서 자손 클래스에서 완성하도록 유도하는 클래스이다. 그래서 미완성 설계도라고도 표현한다. 상속을 위한 클래스이기 때문에 따로 객체를 생성할 수 없으며 다중상속이 불가능하다
인터페이스는 기본 설계도라고 할 수 있습니다. 인터페이스도 추상클래스처럼 다른 클래스를 작성하는데 도움을 주는 목적으로 작성하고 클래스와 다르게 다중상속(구현)이 가능합니다.

추상클래스 특징 
추상 클래스는 인스턴스, 즉 객체를 만들 수 없는 클래스 입니다.
추상 메소드는 하위 클래스에서 메소드의 구현을 강제해야 합니다.
추상 메소드를 포함하는 클래스는 반드시 추상 클래스여야 합니다.
상속하는 집합간에는 연간관계가 있습니다.
다중 상속이 불가능합니다.

인터페이스 특징
모든 멤버 변수는 public static final 이어야 하며, 이를 생략할 수 있습니다.
모든 메소드는 public abstract 이어야 하며, 이를 생략할 수 있습니다.
Java 8 부터는 static, default method를 사용할 수 있습니다.
다중상속이 가능합니다.
상속하는 집합간에는 연관관계가 존재하지 않을 수 있습니다.


https://myjamong.tistory.com/150
https://devlog-wjdrbs96.tistory.com/370

restful

Representational State Transfer” 의 약자이다. 
자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다.
( Ex DB의 학생 정보가 자원일 때, ‘students’를 자원의 표현으로 정한다.)
HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.
즉, REST는 자원 기반의 구조(ROA, Resource Oriented Architecture) 설계의 중심에 Resource가 있고 HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍쳐를 의미한다.

장점
HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구출할 필요가 없다.
HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.
HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.
Hypermedia API의 기본을 충실히 지키면서 범용성을 보장한다.
REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.
여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다.
서버와 클라이언트의 역할을 명확하게 분리한다.
단점
표준이 존재하지 않는다.
사용할 수 있는 메소드가 4가지 밖에 없다.
HTTP Method 형태가 제한적이다.
브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 값이 왠지 더 어렵게 느껴진다.
구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.
PUT, DELETE를 사용하지 못하는 점
pushState를 지원하지 않는 점



https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html

Http 매서드
HTTP 메소드는 클라이언트가 웹 서버에게 사용자 요청의 목적이나 종류를 알리는 수단이다. 최초의 HTTP에서는 GET 메소드 하나밖에 없었지만 이후 다양한 메소드들이 생겨났다.
HTTP 메소드의 종류는 총 9가지가 있으나, 주로 5가지만 활용한다.

주요 메소드 5가지

GET : 보통 리소스를 조회할 때 사용하며, 서버에 전달하고 싶은 데이터는 query를 통해서 전달한다. 메시지 바디를 사용해서 데이터를 전달할 수는 있지만, 지원하지 않는 곳이 많아서 권장하지 않는다.
POST : 데이터 요청을 처리하고, 메시지 바디를 통해 서버로 데이터를 전달한다. 주로 신규 리소스를 등록하거나 프로세스 처리에 사용된다.
PUT : 리소스가 있으면 대체하고 리소스가 없으면 생성한다. 쉽게 말해 데이터를 덮어쓴다.
PATCH : PUT과 마찬가지로 리소스를 수정할 때 사용하지만, PATCH는 리소스를 일부분만 변경할 수 있다.
DELETE :  리소스를 제거할때 사용한다.

HTTP 메소드의 속성에는 안전(Safe Methods), 멱등(Idempotent Methods), 캐시가능(Cacheable Methods)가 있다.

안전(Safe Methods) 메소드를 호출해도 리소스를 변경하지 않는다는 뜻이다. 주요 메소드중에는 GET 메소드가 안전하다고 볼 수 있다.

멱등(Idempotent Methods) 메소드를 계속 호출해도 결과가 똑같다는 뜻이다. Get, PUT, DELETE는 멱등하다고 볼 수 있지만 POST나 PATCH는 멱등하다고 볼 수 없다.

캐시가능(Cacheable Methods) 캐싱을 해서 데이터를 효율적으로 가져올 수 있다는 뜻이다. GET, HEAD, POST, PATCH가 캐시가 가능하지만 실제로는 GET과 HEAD만 주로 캐싱이 쓰인다고 한다.


대용량 트래픽 처리
로드 밸런싱(Load Balancing)
    - 시스템에 대규모로 들어오는 요청(Request)을 연결된 여러 대의 서버로 나누어 부하를 분산하는 방식입니다.
    - 밸런싱 장비에 IP가 부여가 되며, 이 로드밸런서에 연결되어 있는 N개의 장치 중 한곳으로 라우팅 합니다.  
    - 장애가 발생된 서버를 회피하여 연결하므로 이용할 수 없는 서버로 라우팅 되는 것을 방지합니다.

오토 스케일링(Auto Scaling)
    - 서버의 부하를 체크하여 서버를 생성하는 방식입니다(미리 만들어놓은 가상 이미지로 서버를 생성). 
    - 대부분의 클라우드 서비스 제공 업체들이 오토 스케일링을 지원합니다.

데이터베이스 샤딩(Database Sharding)
    - DB 테이블을 수평 분할(horizontal partitioning)하여 물리적으로 서로 다른 곳에 분산하여 관리합니다.
    - 대부분의 DB가 샤딩을 통한 scale-out 을 지원합니다.

데이터베이스 레플리카(Database Replica)
   - 보통 Master 서버에만 쓰기 작업을 하고, 그 Master 서버의 데이터를 복제해서 여러대의 Slave 서버를 만든 후에 Slave 서버에서는 읽기 작업만 수행하도록 하는 방식입니다.
   - Replica Set 구조에서 Write를 수행하는 DB는 'Primary', Read를 수행하는 DB는 'Secondary'라고 부릅니다.

파일 서버(File-Server)
    - 파일을 저장하여 관리할 경우 별도의 파일 서버를 사용합니다.
    - 데이터 손실을 최대한으로 줄이기 위해 총 3개 이상의 파일서버가 필요합니다.
    - AWS의 S3, AZURE의 Blob, GCP의 Google Storage, MongoDB의 GridFS에서 서비스를 제공합니다.

스케일 업(Scale Up)
    - 서버 장비의 스팩을 업그레이드하여 성능을 향상시킵니다.

스케일 아웃(Scale Out)
    - 서버 장비의 수를 늘려 성능을 향상시킵니다.

분산 처리를 위한 클라우드 서비스 선택

오토 스케일링(Auto Scaling)과 로드 밸런싱(Load Balancing)이 지원되는 클라우드 서비스를 선택하면 됩니다. 
가장 많이 사용하는 AWS(Amazon Web Services)를 추천하며(가장 많이 쓴다는 것은 그만큼 개발자들의 레퍼런스도 많다는 의미이므로 자료를 구하기 수월함), 
최근에 한국 리전이 생긴 Microsoft 의 Azure를 선택하거나(같은 요금대의 스펙이 AWS보다 약간 좋은 장점), 최고의 가성비를 자랑하는 GCP(Google Cloud Platform)을 사용할 수 있습니다.
https://blog.naver.com/PostView.nhn?isHttpsRedirect=true&blogId=dktmrorl&logNo=222071746247&redirect=Dlog&widgetTypeCall=true&directAccess=false

싱글톤
객체의 인스턴스가 오직 1개만 생성되는 패턴을 의미한다.

장점
최초 한번의 new 연산자를 통해서 고정된 메모리 영역을 사용하기 때문에 추후 해당 객체에 접근할 때 메모리 낭비를 방지할 수 있다. 
뿐만 아니라 이미 생성된 인스턴스를 활용하니 속도 측면에서도 이점이 있다고 볼 수 있다.
다른 클래스 간에 데이터 공유가 쉽다. 싱글톤 인스턴스가 전역으로 사용되는 인스턴스이기 때문에 다른 클래스의 인스턴스들이 접근하여 사용할 수 있다. 
하지만 여러 클래스의 인스턴스에서 싱글톤 인스턴스의 데이터에 동시에 접근하게 되면 동시성 문제가 발생할 수 있으니 이점을 유의해서 설계하는 것이 좋다.

단점
싱글톤 패턴을 구현하는 코드 자체가 많이 필요하다. 
앞서 소개한 구현 방법외에도 정적 팩토리 메서드에서 객체 생성을 확인하고 
생성자를 호출하는 경우에 멀티스레딩 환경에서 발생할 수 있는 동시성 문제 해결을 위해 syncronized 키워드를 사용해야 한다.

테스트하기 어렵다. 싱글톤 인스턴스는 자원을 공유하고 있기 때문에 테스트가 결정적으로 격리된 환경에서 수행되려면 매번 인스턴스의 상태를 초기화시켜주어야 한다. 
그렇지 않으면 어플리케이션 전역에서 상태를 공유하기 때문에 테스트가 온전하게 수행되지 못한다.

의존 관계상 클라이언트가 구체 클래스에 의존하게 된다. 
new 키워드를 직접 사용하여 클래스 안에서 객체를 생성하고 있으므로, 이는 SOLID 원칙 중 DIP를 위반하게 되고 OCP 원칙 또한 위반할 가능성이 높다.

tdd란
Test Driven Development의 약자로, 테스트 주도 개발을 의미한다. 
테스트를 먼저 만들고 테스트를 통과하기 위한 것을 짜는 것 즉, 만드는 과정에서 우선 테스트를 작성하고 그걸 통과하는 코드를 만들고를 반복하면서 제대로 동작하는지에 대한 피드백을 적극적으로 받는 것이다.
처음해보는 프로그램 주제
나에 대한 불확실성이 높은 경우
고객의 요구조건이 바뀔 수 있는 프로젝트
외부적인 불확실성이 높은 경우
개발하는 중에 코드를 많이 바꿔야 된다고 생각하는 경우
내가 개발하고 나서 이 코드를 누가 유지보수할지 모르는 경우
https://gmlwjd9405.github.io/2018/06/03/agile-tdd.html

n+1
조회 시 1개의 쿼리를 생각하고 설계를 했으나 나오지 않아도 되는 조회의 쿼리가 N개가 더 발생하는 문제이다. 
DBMS 툴을 이용해 직접 쿼리문을 만들어 조회할 때는 물론 하나의 쿼리가 발생하겠지만 mybatis, 넘어서는 JPA가 등장함에 따라 자동화된 쿼리문들이 생겨나면서 어쩔 수 없이 발생하는 문제라고 한다. 
해결방법
즉시로딩은 Jpql로 전달되는 과정에서 Jpql 후 Eager 감지로 인한 N쿼리가 추가로 발생하는 경우가 있기 때문에 사용해서는 안된다.
지연로딩에서의 해결책 - fetch join - 지연로딩 과정에서 우리는 바로 사용을 할 객체에 대해서는 join을 걸 수 있도록 조정해주어야 한다.
최소화하고싶다면 @EntityGraph를 사용한다.
https://velog.io/@jinyoungchoi95/JPA-%EB%AA%A8%EB%93%A0-N1-%EB%B0%9C%EC%83%9D-%EC%BC%80%EC%9D%B4%EC%8A%A4%EA%B3%BC-%ED%95%B4%EA%B2%B0%EC%B1%85


SQL Injection
SQL Injection은 서버에서 실행되는 SQL을 악의적으로 이용하는 공격이다. 이름처럼 기존 SQL에 악의적인 SQL 구문을 삽입하여 데이터 탈취, 삭제 등을 할 수 있다. 그렇기 때문에 뚫리면 상당히 치명적이다.
하지만 요즘은 대부분의 SQL 지원 라이브러리에서 SQL Injection을 방어해준다.

Error based SQL Injection
일부러 SQL 에러를 발생시켜서 원하는 정보를 취득하는 공격 기법이다. 에러가 발생하면 DB에 대한 정보를 단편적으로 얻을 수 있게 되므로 에러 메시지가 노출되지 않도록 조심해야한다.

Blind SQL Injection
쿼리 결과의 참/거짓 정보를 보고 원하는 정보가 존재하는지 추론할 수 있다. 이를 통해 데이터베이스, 테이블, 컬럼 명을 파악할 수 있다.

Union SQL Injection
Union 명령을 이용해서 정보를 취득할 수 있다.

Cross-Site Scription (XSS)
웹 페이지에 악성 자바스크립트를 삽입하는 공격이다. 이 공격을 이용하면 사이트 이용자의 정보를 손쉽게 탈취할 수 있다. 아주 간단한 사례를 살펴보면 사용자가 입력할 수 있는 게시판 같은 페이지에 자바스크립트 코드를 입력하는 것이다.

CSRF Attack
Cross-Site Request Forgery라고 부른다. 공격자가 서비스 사용자를 이용하여 요청을 보내는 공격을 말한다.

Command Injection
Command Injection은 쉘을 실행시키는 로직을 이용한 공격이다. 시스템 권한이 탈취되는 것이나 마찬가지기 때문에 매우 치명적이다.

File Upload Attack
공격 스크립트가 담긴 파일을 서버로 업로드하는 공격이다. WebShell이 가능한 코드가 담긴 파일을 업로드하고 해커가 URL을 통해 접근 가능해지면 Command Injection과 같은 효과를 볼 수 있다.


쿠키와 세션의 차이
